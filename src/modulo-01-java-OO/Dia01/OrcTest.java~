import static org.junit.Assert.*;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
<<<<<<< HEAD
import java.util.ArrayList;
import java.util.Arrays;
=======
import java.util.*;
>>>>>>> 2526e6513dac7607052531cdaefcd566da4ab8f4

/**
 * A classe de teste OrcTest.
 *
 * @author  (seu nome)
 * @version (um número de versão ou data)
 */
public class OrcTest
{
   
    
    
    @Test
    public void orcNasceCom110Vida() {
        // Arrange - Montagem dos dados de teste
        Orc umOrc;
        // Act - Execução da ação de testes
        umOrc = new Orc();
        // Assert - Verificação
        int esperado = 110;
        int resultadoObtido = umOrc.getVida();
        
        assertEquals(esperado, resultadoObtido);
    }
    
    @Test
    public void orcNasceVivo() {
        // Arrange - Montagem dos dados de teste
        Orc umOrc;
        // Act - Execução da ação de testes
        umOrc = new Orc();
        // Assert - Verificação
        Status esperado = Status.VIVO;
        Status obtido = umOrc.getStatus();
        
        assertEquals(esperado, obtido);
    }
    
    @Test
    public void orcRecebeAtaqueUmaVez() {
        // Arrange - Montagem dos dados de teste
<<<<<<< HEAD
        Orc umOrc = new Orc("Nomaooooooo");
=======
        Orc umOrc = new Orc("Urukhai");
>>>>>>> 2526e6513dac7607052531cdaefcd566da4ab8f4
        // Act
        umOrc.recebeAtaque();
        // Assert - Verificação
        int esperado = 100;
        int resultadoObtido = umOrc.getVida();
        
        assertEquals(esperado, resultadoObtido);
    }
    
    @Test
    public void orcRecebeAtaqueDuasVezes() {
        // Arrange - Montagem dos dados de teste
<<<<<<< HEAD
        Orc umOrc = new Orc("Nomaooooooo");
=======
        Orc umOrc = new Orc("Urukhai");
>>>>>>> 2526e6513dac7607052531cdaefcd566da4ab8f4
        // Act
        umOrc.recebeAtaque();
        umOrc.recebeAtaque();
        // Assert - Verificação
        int esperado = 90;
        int resultadoObtido = umOrc.getVida();
        
        assertEquals(esperado, resultadoObtido);
    }
    
    @Test
    public void orcRecebeAtaqueCincoVezes() {
        // Arrange - Montagem dos dados de teste
<<<<<<< HEAD
        Orc umOrc = new Orc("Nomaooooooo");
=======
        Orc umOrc = new Orc("Urukhai");
>>>>>>> 2526e6513dac7607052531cdaefcd566da4ab8f4
        // Act
        umOrc.recebeAtaque();
        umOrc.recebeAtaque();
        umOrc.recebeAtaque();
        umOrc.recebeAtaque();
        umOrc.recebeAtaque();
        // Assert - Verificação
        int esperado = 60;
        int resultadoObtido = umOrc.getVida();
        
        assertEquals(esperado, resultadoObtido);
    }
    
    @Test
    public void orcFicaFeridoAoReceberAtaque() {
        // Arrange - Montagem dos dados de teste
        Orc umOrc = new Orc("Urukhai");
        // Act
        umOrc.recebeAtaque();
        // Assert - Verificação
        Status esperado = Status.FERIDO;
        Status resultadoObtido = umOrc.getStatus();
        
        assertEquals(esperado, resultadoObtido);
    }
    
    @Test
    public void orcRecebeAtaqueDozeVezes() {
        // Arrange - Montagem dos dados de teste
<<<<<<< HEAD
        Orc umOrc = new Orc("Nomaooooooo");
=======
        Orc umOrc = new Orc("Urukhai");
>>>>>>> 2526e6513dac7607052531cdaefcd566da4ab8f4
        // Act
        umOrc.recebeAtaque();
        umOrc.recebeAtaque();
        umOrc.recebeAtaque();
        umOrc.recebeAtaque();
        umOrc.recebeAtaque();
        umOrc.recebeAtaque();
        umOrc.recebeAtaque();
        umOrc.recebeAtaque();
        umOrc.recebeAtaque();
        umOrc.recebeAtaque();
        umOrc.recebeAtaque();
        umOrc.recebeAtaque();
        // Assert - Verificação
        int esperado = 0;
        int resultadoObtido = umOrc.getVida();
        
        assertEquals(esperado, resultadoObtido);
    }
    
    @Test
    public void orcToStringRetornaVidaPadrao() {
        // Arrange
        Orc orc = new Orc("Nomaooooooo");
        // Act
        String resultadoObtido = orc.toString();
        // Assert
        String esperado = "Vida atual: 110";
        assertEquals(esperado, resultadoObtido);
    }
    
    @Test
    public void orcToStringAposReceberAtaque() {
        // Arrange
<<<<<<< HEAD
        Orc orc = new Orc("Nomaooooooo");
=======
        Orc orc = new Orc("Urukhai");
>>>>>>> 2526e6513dac7607052531cdaefcd566da4ab8f4
        // Act
        orc.recebeAtaque();
        String resultadoObtido = orc.toString();
        // Assert
        String esperado = "Vida atual: 100";
        assertEquals(esperado, resultadoObtido);
    }
    
    @Test
    public void orcToStringAposReceberDozeAtaques() {
        // Arrange - Montagem dos dados de teste
<<<<<<< HEAD
        Orc umOrc = new Orc("Nomaooooooo");
=======
        Orc umOrc = new Orc("Urukhai");
>>>>>>> 2526e6513dac7607052531cdaefcd566da4ab8f4
        // Act
        umOrc.recebeAtaque();
        umOrc.recebeAtaque();
        umOrc.recebeAtaque();
        umOrc.recebeAtaque();
        umOrc.recebeAtaque();
        umOrc.recebeAtaque();
        umOrc.recebeAtaque();
        umOrc.recebeAtaque();
        umOrc.recebeAtaque();
        umOrc.recebeAtaque();
        umOrc.recebeAtaque();
        umOrc.recebeAtaque();
        String resultadoObtido = umOrc.toString();
        // Assert
        String esperado = "Vida atual: 0";
        assertEquals(esperado, resultadoObtido);
    }
    
    @Test
    public void orcNasceComNomeInformado() {
        // Arrange - Montagem dos dados de teste
        Orc umOrc;
        String esperado = "Urukhai";	
        // Act - Execução da ação de testes
        umOrc = new Orc(esperado);
        // Assert - Verificação
        String resultadoObtido = umOrc.getNome();
        
        assertEquals(esperado, resultadoObtido);
    }
    
    @Test
<<<<<<< HEAD
    public void orcRecebeAtaqueComNumeroMenorQue0() {
    
        Orc orc = new Orc("Nomin");
        
        orc.recebeAtaque();
        
        int ExperienciaEsperada = 2;
        int VidaEsperada =  110;
        int ExperienciaObtida = orc.getExperiencia();
        int vidaObtida = orc.getVida();
        
        assertEquals(ExperienciaEsperada, ExperienciaObtida);
        assertEquals(VidaEsperada, vidaObtida);

    }
    
    @Test
    public void orcRecebeAtaqueEntre0E100() {
        
        Orc orc = new Orc("Nomiee");
        
        orc.setExperiencia(1);
        orc.recebeAtaque();
       
        
        int ExperienciaEsperada = 1;
        int VidaEsperada =  110;
        int ExperienciaObtida = orc.getExperiencia();
        int vidaObtida = orc.getVida();
        
        assertEquals(ExperienciaEsperada, ExperienciaObtida);
        assertEquals(VidaEsperada, vidaObtida);
    
        
    }
    
    @Test
    public void orcRecebeAtaqueMaior100() {
        
        Orc orc = new Orc("Nomiee");
        
        orc.setExperiencia(0);
        orc.recebeAtaque();
       
        
        int ExperienciaEsperada = 0;
        int VidaEsperada =  100;
        int ExperienciaObtida = orc.getExperiencia();
        int vidaObtida = orc.getVida();
        
        assertEquals(ExperienciaEsperada, ExperienciaObtida);
        assertEquals(VidaEsperada, vidaObtida);
    
        
    }
    
    @Test
    public void orcConseguePerder1ItemDoInventario() {
        
       Orc orc = new Orc();
       ItemDoInventario item1 = new ItemDoInventario("Espada de Diamantes", 1);
       ItemDoInventario item2 = new ItemDoInventario("Espada de Ferro", 2);
        
       orc.adicionarItemDaLista(item1);
       orc.adicionarItemDaLista(item2);
       
       orc.removerItemDaLista(item2);
       assertEquals(1, orc.getlistaDeItens().size());      
    }
    
    @Test
    public void orcConsegueAdicionar2ItensDoInventarioComDescricaoEQuantidadeCorretos() {
    
         Orc orc = new Orc();
         ItemDoInventario item1 = new ItemDoInventario("Espada de Diamantes", 1);
         ItemDoInventario item2 = new ItemDoInventario("Espada de Ferro", 2);
         
         ArrayList<ItemDoInventario> listaDeItensParaComparar = new ArrayList<ItemDoInventario>();
         listaDeItensParaComparar.add(item1);
         listaDeItensParaComparar.add(item2);
         
         orc.adicionarItemDaLista(item1);
         orc.adicionarItemDaLista(item2);
        
         assertEquals(orc.getlistaDeItens().get(0), listaDeItensParaComparar.get(0));
         assertEquals(orc.getlistaDeItens().get(1), listaDeItensParaComparar.get(1));
        
        }
        
    @Test
    public void Lista2ItensCorretamente() {
    
         Orc orc = new Orc();
         ItemDoInventario item1 = new ItemDoInventario("Espada de Diamantes", 1);
         ItemDoInventario item2 = new ItemDoInventario("Espada de Ferro", 2);
         
         orc.adicionarItemDaLista(item1);
         orc.adicionarItemDaLista(item2);
         
         String resultadoEsperado = "Espada de Diamantes,Espada de Ferro";
         
         assertEquals(resultadoEsperado, orc.getDescricoesItens());
    }
    
    @Test 
    public void inseriTresItensNaListaERetornaOitem2QueTemAMaiorQuantidade() {
    
        Orc orc = new Orc();
        ItemDoInventario item1 = new ItemDoInventario("Espada de Diamantes", 1);
        ItemDoInventario item2 = new ItemDoInventario("Espada de Ferro", 3);
        ItemDoInventario item3 = new ItemDoInventario("Espada de BeyBlade",2);
        
         orc.adicionarItemDaLista(item1);
         orc.adicionarItemDaLista(item2);
         orc.adicionarItemDaLista(item3);
    
         assertEquals(item2, orc.getlistaDeItens().get(1));
    }
    
    @Test 
    public void inseriQuatroItensNaListaERetornaitem1QueTemAMaiorQuantidade() {
    
        Orc orc = new Orc();
        ItemDoInventario item1 = new ItemDoInventario("Espada de Diamantes", 10);
        ItemDoInventario item2 = new ItemDoInventario("Espada de Ferro", 5);
        ItemDoInventario item3 = new ItemDoInventario("Espada de BeyBlade",2);
        ItemDoInventario item4 = new ItemDoInventario("Espada de seila",4);
        
         orc.adicionarItemDaLista(item1);
         orc.adicionarItemDaLista(item2);
         orc.adicionarItemDaLista(item3);
         orc.adicionarItemDaLista(item4);
    
         assertEquals(item1, orc.getlistaDeItens().get(0));
    }
    
    @Test 
    public void inseriCincoItensNaListaERetornaitem5QueTemAMaiorQuantidade() {
    
        Orc orc = new Orc();
        ItemDoInventario item1 = new ItemDoInventario("Espada de Diamantes", 10);
        ItemDoInventario item2 = new ItemDoInventario("Espada de Ferro", 5);
        ItemDoInventario item3 = new ItemDoInventario("Espada de BeyBlade",2);
        ItemDoInventario item4 = new ItemDoInventario("Espada de seila",4);
        ItemDoInventario item5 = new ItemDoInventario("Espada de vaisaber",16);
        
        orc.adicionarItemDaLista(item1);
        orc.adicionarItemDaLista(item2);
        orc.adicionarItemDaLista(item3);
        orc.adicionarItemDaLista(item4);
        orc.adicionarItemDaLista(item5);
    
        assertEquals(item5, orc.getlistaDeItens().get(4));
=======
    public void orcNasceComNomeVazioInformado() {
        // Arrange - Montagem dos dados de teste
        Orc umOrc;
        String esperado = "";	
        // Act - Execução da ação de testes
        umOrc = new Orc(esperado);
        // Assert - Verificação
        String resultadoObtido = umOrc.getNome();
        
        assertEquals(esperado, resultadoObtido);
    }
    
    @Test
    public void orcNasceComNomeNuloInformado() {
        // Arrange - Montagem dos dados de teste
        Orc umOrc;
        String esperado = null;	
        // Act - Execução da ação de testes
        umOrc = new Orc(esperado);
        // Assert - Verificação
        String resultadoObtido = umOrc.getNome();
        
        assertEquals(esperado, resultadoObtido);
    }
    
    @Test
    public void orcMorreAposDozeFlechadas() {
        // Arrange - Montagem dos dados de teste
        Orc umOrc = new Orc("Urukhai");
        Status esperado = Status.MORTO;
        // Act
        umOrc.recebeAtaque();
        umOrc.recebeAtaque();
        umOrc.recebeAtaque();
        umOrc.recebeAtaque();
        umOrc.recebeAtaque();
        umOrc.recebeAtaque();
        umOrc.recebeAtaque();
        umOrc.recebeAtaque();
        umOrc.recebeAtaque();
        umOrc.recebeAtaque();
        umOrc.recebeAtaque();
        umOrc.recebeAtaque();
        Status resultadoObtido = umOrc.getStatus();
        // Assert
        assertEquals(esperado, resultadoObtido);
    }
    
    @Test
    public void orcRecebeAtaqueComNumeroGeradoMenorQueZero() {
        Orc orc = new Orc("Tom");
        orc.recebeAtaque();
        
        int vidaEsperada = 110;
        int experienciaEsperada = 2;
        
        assertEquals(vidaEsperada, orc.getVida());
        assertEquals(experienciaEsperada, orc.getExperiencia());
    }
    
    @Test
    public void orcRecebeAtaqueComNumeroGeradoEntre0e100() {
        Orc orc = new Orc("Urukhai"); // para somar 65 ao número gerado
        orc.setExperiencia(1); // ímpar e menor que 2 para poder manter entre 0 e 100
        orc.recebeAtaque();
        
        int vidaEsperada = 110;
        int experienciaEsperada = 1;
        
        assertEquals(vidaEsperada, orc.getVida());
        assertEquals(experienciaEsperada, orc.getExperiencia());
    }
    
    @Test
    public void orcRecebeAtaqueNormal() {
        Orc orc = new Orc("Urukhai"); // para somar 65 ao número gerado e elevar ao cubo e não estar nos casos acima.
        orc.recebeAtaque();
        
        int vidaEsperada = 100;
        Status statusEsperado = Status.FERIDO;
        
        assertEquals(vidaEsperada, orc.getVida());
        assertEquals(statusEsperado, orc.getStatus());
    }
    
    @Test
    public void quandoAdicionoAdagaAoInventario() {
        // Arrange
        Orc urukhai = new Orc();
        ItemDoInventario adaga = new ItemDoInventario(34, "Adaga");
        ArrayList<ItemDoInventario> inventarioEsperado = new ArrayList<>();
        inventarioEsperado.add(adaga);
        // Act
        urukhai.adicionarItem(adaga);
        ArrayList<ItemDoInventario> inventarioObtido = urukhai.getItens();
        // Assert...
        assertEquals(inventarioEsperado, inventarioObtido);
        assertEquals(inventarioEsperado.get(0), inventarioObtido.get(0));
    }

    @Test
    public void quandoAdicionoAdagaEEscudoAoInventario() {
        // Arrange
        Orc urukhai = new Orc();
        ItemDoInventario adaga = new ItemDoInventario(34, "Adaga");
        ItemDoInventario escudo = new ItemDoInventario(12, "Escudo");
        ArrayList<ItemDoInventario> inventarioEsperado = new ArrayList<>();
        inventarioEsperado.add(adaga);
        inventarioEsperado.add(escudo);
        // Act
        urukhai.adicionarItem(adaga);
        urukhai.adicionarItem(escudo);
        ArrayList<ItemDoInventario> inventarioObtido = urukhai.getItens();
        // Assert
        assertEquals(inventarioEsperado, inventarioObtido);
    }

    @Test
    public void quandoAdicionoAdagaAoInventarioEPercoAdaga() {
        // Arrange
        Orc urukhai = new Orc();
        ItemDoInventario adaga = new ItemDoInventario(34, "Adaga");
        ArrayList<ItemDoInventario> inventarioEsperado = new ArrayList<>();
        urukhai.adicionarItem(adaga);
        // Act
        urukhai.perderItem(adaga);
        ArrayList<ItemDoInventario> inventarioObtido = urukhai.getItens();
        // Assert
        assertEquals(inventarioEsperado, inventarioObtido);
    }

    @Test
    public void quandoAdicionoAdagaEEscudoAoInventarioEPercoEscudo() {
        // Arrange
        Orc urukhai = new Orc();
        ItemDoInventario adaga = new ItemDoInventario(34, "Adaga");
        ItemDoInventario escudo = new ItemDoInventario(12, "Escudo");
        ArrayList<ItemDoInventario> inventarioEsperado = new ArrayList<>();
        inventarioEsperado.add(adaga);
        urukhai.adicionarItem(adaga);
        urukhai.adicionarItem(escudo);
        // Act
        urukhai.perderItem(escudo);
        ArrayList<ItemDoInventario> inventarioObtido = urukhai.getItens();
        // Assert
        assertEquals(inventarioEsperado, inventarioObtido);
    }
    
    @Test
    public void getDescricoesComNenhumItem() {
        // Arrange
        Orc urukhai = new Orc();
        String descricoesEsperada = "";
        // Act
        String resultadoDescricoes = urukhai.getDescricoesItens();
        // Assert
        assertEquals(descricoesEsperada, resultadoDescricoes);
    }
    
    @Test
    public void getDescricoesComUmItem() {
        // Arrange
        Orc urukhai = new Orc();
        ItemDoInventario adaga = new ItemDoInventario(34, "Adaga");
        urukhai.adicionarItem(adaga);
        String descricoesEsperada = "Adaga";
        // Act
        String resultadoDescricoes = urukhai.getDescricoesItens();
        // Assert
        assertEquals(descricoesEsperada, resultadoDescricoes);
    }
    
    @Test
    public void getDescricoesComDoisItens() {
        // Arrange
        Orc urukhai = new Orc();
        ItemDoInventario adaga = new ItemDoInventario(34, "Adaga");
        ItemDoInventario escudo = new ItemDoInventario(12, "Escudo de carvalho");
        urukhai.adicionarItem(adaga);
        urukhai.adicionarItem(escudo);
        String descricoesEsperada = "Adaga,Escudo de carvalho";
        // Act
        String resultadoDescricoes = urukhai.getDescricoesItens();
        // Assert
        assertEquals(descricoesEsperada, resultadoDescricoes);
>>>>>>> 2526e6513dac7607052531cdaefcd566da4ab8f4
    }
    
    @Test
    public void orcTentarSorteAumenta1000UnidadesDosItens() {
        // Arrange
        Orc urukhai = new Orc();
        urukhai.setStatus(Status.DORMINDO);
        urukhai.setExperiencia(3);
        urukhai.adicionarItem(new ItemDoInventario(3, "Poção de mana"));
        urukhai.adicionarItem(new ItemDoInventario(1, "Poção Lança"));
        // Act
        urukhai.tentarSorte();
        // Assert
        ItemDoInventario pocao = urukhai.getItens().get(0);
        ItemDoInventario lanca = urukhai.getItens().get(1);
        assertEquals(1003, pocao.getQuantidade());
        assertEquals(1001, lanca.getQuantidade());
    }
    
<<<<<<< HEAD
    
   /*
    @Test
    public void orcTentarSorteAumenta1000UnidadesDosItens() {
        // Arrange
        Orc orc = new Orc();
        orc.setStatus(Status.DORMINDO);
        orc.setExperiencia(3);
        ItemDoInventario item1 = new ItemDoInventario("Poção de mana", 3);
        ItemDoInventario item2 = new ItemDoInventario("Poção Lança", 1);
        
        orc.adicionarItemDaLista(item1);
        orc.adicionarItemDaLista(item2);
        // Act
        orc.tentaSorte();
        // Assert
        //ItemDoInventario pocao1 = urukhai.getlistaDeItens().get(0);
        //ItemDoInventario lanca1 = urukhai.getlistaDeItens().get(1);
        
        
        assertEquals(1003, orc.getlistaDeItens().get(0).getQuantidade());
        assertEquals(1001, orc.getlistaDeItens().get(1).getQuantidade());
    }
  */
    
=======
>>>>>>> 2526e6513dac7607052531cdaefcd566da4ab8f4
    @Test
    public void orcTentarSorteNaoFazNada() {
        // Arrange
        Orc urukhai = new Orc();
<<<<<<< HEAD
        urukhai.getlistaDeItens(new ItemDoInventario( "Poção de mana", 3));
        urukhai.getlistaDeItens(new ItemDoInventario( "Poção Lança", 1));
        // Act
        urukhai.tentaSorte();
        // Assert
        ItemDoInventario pocao = urukhai.getlistaDeItens().get(0);
        ItemDoInventario lanca = urukhai.getlistaDeItens().get(1);
        assertEquals(3, pocao.getQuantidade());
        assertEquals(1, lanca.getQuantidade());
    }
    
      

=======
        urukhai.adicionarItem(new ItemDoInventario(3, "Poção de mana"));
        urukhai.adicionarItem(new ItemDoInventario(1, "Poção Lança"));
        // Act
        urukhai.tentarSorte();
        // Assert
        ItemDoInventario pocao = urukhai.getItens().get(0);
        ItemDoInventario lanca = urukhai.getItens().get(1);
        assertEquals(3, pocao.getQuantidade());
        assertEquals(1, lanca.getQuantidade());
    }
>>>>>>> 2526e6513dac7607052531cdaefcd566da4ab8f4
}










